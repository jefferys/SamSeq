% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/exceptions.R
\name{exceptionSignaling}
\alias{exceptionSignaling}
\alias{messageWith}
\alias{stopWith}
\alias{warningWith}
\title{Better condition signaling with objects}
\usage{
stopWith(condition)

warningWith(condition)

messageWith(condition)
}
\arguments{
\item{condition}{The condition object being signaled with. If the root class
(last) is not "condition", the object is resignaled as is.}
}
\value{
Nothing, called only for their signal generating and processing side
  effects.
}
\description{
Use the \code{stopWith}, \code{warningWith}, and \code{messageWith} functions
as replacements for the base \code{\link{stop}}, \code{\link{warning}}, and
\code{\link{message}} functions when signaling with condition-based objects.
These re-base the object to the correct "condition" subclass based on how
they were signaled, adding either "error", "warning" and "message"
(respectively) just before "condition. They then matching this new object
with the matchin base \R function. This allows handlers to catch
signaled objects based on how they were signaled, and to either group simple
message based signals in with object signals, or to differentiate them.
}
\details{
Normally, when a signal is caught, the handler that process it is based on
the class of the signal object. \R's familiar signaling functions
(\code{\link{stop}}, \code{\link{warning}}, and \code{\link{message}}) create
objects that have different classes based on which was used. However, if you
pass one of these signaling function an object rather than a simple message,
it does \emph{not} change the class. If you don't catch it, somehow \R still
knows they are different signals and does the right thing. However if the
signal is caught in user code, this information is lost. A handler can not
then recall \code{\link{stop}}, for instance, if it does not, after all, know
how to handle a signal (a common problem).
}
\section{Functions}{
\itemize{
\item \code{stopWith}: Moves or adds class \code{c("error",
  "condition")} to the end of the class of a condition object.

  The \code{\link{stop}} function converts simple messages into objects of
  class \code{c("simpleError", "error", "condition")}; both can thus be
  caught with an \code{error=} handler, or they can be distinguished by the
  \code{"simpleError"} class that (should) only be on a simple message based
  signal.

\item \code{warningWith}: Moves or adds class \code{c("warning",
  "condition")} to the end of the class of the signal object.

  The \code{\link{warning}} function converts simple messages into objects of
  class \code{c("simpleWarning", "warning", "condition")}; both can thus be
  caught with a \code{warning=} handler, or they can be distinguished by the
  \code{"simpleWarning"} class that (should) only be on a simple message
  based signal.

\item \code{messageWith}: Moves or adds class \code{c("message",
  "condition")} to the end of the class of the signal object.

  The \code{\link{message}} function converts simple messages into objects of
  class \code{c("simpleMessage", "message", "condition")}; both can thus be
  caught with a \code{message=} handler, or they can be distinguished by the
  \code{"simpleMessage"} class that (should) only be on a simple message
  based signal.
}}

