% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/exceptions.R
\name{extendException}
\alias{extendException}
\title{Create a new exception that inherits from an existing one.}
\usage{
extendException(exception, base = Exception(), message = NULL,
  call = NULL, ...)
}
\arguments{
\item{exception}{A one-element character vector giving the new exception's
class name.}

\item{base}{An existing exception to base this exception off of. Often
constructed in-line to provide needed parameters. By default this is the
exception generated by a no-parameter call to "Exception()."}

\item{message}{The message for this exception, by default the message from
the base exception which is used when this is \code{NULL}.}

\item{call}{The call parameter for this exception, by default the call from
the base exception which is used when this is \code{NULL}.}

\item{...}{name= value parameters that will be included in exception generated
and will be accessible as list elements, i.e. <exception>$<name> == <value>
This will replace any data elements of the same name from base exceptions.
The arguments \code{exception}, \code{base}, \code{message}, and
\code{call} already have meaning and can't be re-used.}
}
\value{
A new exception class inheriting the class hierarchy of the \code{base=}
exception, and any of that classes data elements, but with new message and
call elements, and any additional data elements specified.
}
\description{
This is used to create exception constructors. Exceptions are based off of an
existing exception, usually constructed inline. This base exception is then
used to create a new exception. The message, call, and and data properties
are copied into the new exception, but can be over-ridden by any new message,
call or data properties specified. Essentially any \code{name= value}
properties can be included by specifying them as arguments, except for the
already-used argument names \code{exception}, \code{base}, \code{message},
and \code{call}
}
\section{Efficiency considerations}{
 Building child class instances using
  parent class instances is not normally done in \R due to its copy-by-value
  semantics. However questions involving the efficiency of even a
  relatively long chain of exceptions built using nested calls to
  \code{extendException} are irrelevant because exceptions should be
  generated rarely and not used for routine flow control.
}

