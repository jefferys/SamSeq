% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SamExceptions.R
\name{SamFileFormatException}
\alias{HeaderOnlyException}
\alias{MISSING_HEADER_Exception}
\alias{SamFileFormatException}
\alias{SamFileHeaderException}
\alias{SamFileReadException}
\title{Sam format exceptions}
\usage{
\code{ SamFileFormatException( path = NA, line = NA, data = NA,
   message = *, call = NULL, package = packageName(), ...)}

\code{ SamFileHeaderException( path = NA, line = NA, data = NA,
   message = *, call = NULL, package = packageName(), ...)}

\code{ SamFileReadException( path = NA, line = NA, data = NA,
   message = *, call = NULL, package = packageName(), ...)}

\code{ MISSING_HEADER_Exception( path = NA, line = NA, data = NA,
   message = *, call = NULL, package = packageName(), ...)}

\code{ HeaderOnlyException( path = NA, line = NA, data = NA,
   message = *, call = NULL, package = packageName(), ...)}
}
\arguments{
\item{path}{The path associated with an exception, as a one element character
vector. It may be \code{NA} but should not be \code{NULL}. Accessible via
the the \code{exceptionPath} S3 accessor.}

\item{line}{The line number associated with an exception, as a one element
integer vector. It may be \code{NA} but should not be \code{NULL}.
Accessible via the the \code{exceptionLine} S3 accessor.}

\item{data}{The data or value associated with an exception, the format can
vary. Accessible via the the \code{exceptionData} S3 accessor.}

\item{message}{The message associated with the exception, for reading by
humans. The default message is usually good enough, but can be overridden
through this parameter if needed. When constructed inside packages, the
message displayed will have the name of the package prepended as
\code{'[\var{package}] \var{message}'} due to \code{conditionMessage} being
over-ridden for \code{Exception} subclasses.}

\item{call}{The call or call stack associated with the exception. By default
this is NULL as \code{IOException}s are usually environment problems. Can
be overridden to provide the \code{\link{Sys.calls}} call stack or a single
\code{\link{Sys.call}}.}

\item{package}{The package where this exception is generated. May be
\code{NULL} when exceptions are generated and signaled from interactive or
script level code and not from a package. Attempts to guess the package by
default. Will usually include the package in the displayed \code{message}.}

\item{...}{Extra parameters for additional key=value data as desired.}
}
\value{
An \code{Exception} object whose class hierarchy is set by the
  function call and that may contain additional data.
}
\description{
These are a collection of functions to create data exception objects when
there are problems with the format or content of sam files or sam data.
}
\section{Functions}{
\itemize{
\item \code{SamFileFormatException}: This exception and sub-classes describe problems with sam files.
\itemize{
   \item message = [\var{package}] A SamFileFormatException occurred at line
   \var{line} in sam file: "\var{file}". (Running in: "\var{getwd()}"). That
   line began: "\var{first 80 char of data}".
   \item class = \code{c( "SamFileFormatException", "FileFormatException",
   "DataException", "Exception", "condition" )}
}

\item \code{SamFileHeaderException}: This exception and sub-classes describe problems with sam file headers.
\itemize{
   \item message = [\var{package}] A SamFileHeaderException occurred parsing
   the sam file header at line \var{line} in file: "\var{file}". (Running in:
   "\var{getwd()}"). That line began: "\var{first 80 char of data}".
   \item class = \code{c( "SamFileHeaderException", "SamFileFormatException",
   "FileFormatException", "DataException", "Exception", "condition" )}
}

\item \code{SamFileReadException}: This exception and sub-classes describe problems with sam file reads.
\itemize{
   \item message = [\var{package}] A SamFileReadException occurred parsing
   the sam file read at line \var{line} in file: "\var{file}". (Running in:
   "\var{getwd()}"). That line began: "\var{first 80 char of data}".
   \item class = \code{c( "SamFileReadException","SamFileFormatException",
   "FileFormatException", "DataException", "Exception", "condition" )}
}

\item \code{MISSING_HEADER_Exception}: Sam files require headers. Temporary files with just reads are not true sam
files.
\itemize{
   \item message = [\var{package}] A MISSING_HEADER Exception occurred in sam
   file: "\var{file}". (Running in: "\var{getwd()}"). Sam files require
   headers. Temporary files with just reads are not true sam files.'
   \item class = \code{c( "MISSING_HEADER_Exception",
   "SamFileHeaderException", "SamFileFormatException", "FileFormatException",
   "DataException", "Exception", "condition" )}
}

\item \code{HeaderOnlyException}: Sam files require reads. Temporary files with just headers are not true sam
files.
\itemize{
   \item message = [\var{package}] A HeaderOnlyException occurred in sam
   file: "\var{file}". (Running in: "\var{getwd()}"). Sam files require
   reads. Temporary files with just headers are not true sam files.'
   \item class = \code{c( "HeaderOnlyException",
   "SamFileReadException", "SamFileFormatException", "FileFormatException",
   "DataException", "Exception", "condition" )}
}
}}
\section{Htsjdk Exceptions}{
 Names in all capitals are consistent with Htsjdk
  Exceptions (A Java API for high-throughput sequencing data (HTS) formats,
  \url{ https://github.com/samtools/htsjdk}, specifically the MIT licensed
  file \file{src/main/java/htsjdk/samtools/SAMValidationError.java}). These
  Java errors are used, for instance, by then MIT licensed Picard tools,
  \url{http://broadinstitute.github.io/picard/}
}
\seealso{
\code{\link{Exception}}
}

