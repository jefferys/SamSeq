% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/exceptions.R
\name{Exception}
\alias{Exception}
\alias{FileException}
\alias{FileNotFoundException}
\alias{condition}
\title{Create exception condition objects.}
\usage{
condition(message = "condition", call = NULL)

Exception(message = "Exception", call = NULL, ...)

FileException(path, message = NULL, call = NULL, ...)

FileNotFoundException(path, message = paste0("File not found: \\"", path,
  "\\". (Running in: \\"", getwd(), "\\")."), call = NULL, ...)
}
\arguments{
\item{message}{The message associated with the exception. Generally should be
more informative than just the exception class name, which is used by
default in base exception classes.}

\item{call}{The call stack at the point where this exception was constructed.
Generally this is not provided (it is \code{NULL}) as the message should be
informative, not just a call stack trace.}

\item{path}{The path associated with a FileException.}
}
\value{
An exception object in the class hierarchy:
\itemize{
\item{\code{                                                 condition}}
\item{\code{                                      Exception, condition}}
\item{\code{                       FileException, Exception, condition}}
\item{\code{FileNotFoundException, FileException, Exception, condition}}
}
}
\description{
Creates exception condition object of various classes. Exceptions come in
hierarchies to allow handling any exception in a group. All exceptions
inherit from condition, and hence have a message (accessible with
\code{conditionMessage}) and a call,() usually NULL, accessible with
\code{conditionCall}). However the base class should be considered to be
"Exception". Some exceptions have additional required parameters, such as
FileException, which requires a \code{path} parameter. These parameters are
required in all child exceptions too.
}
\details{
You can call stop, warning, and message on any exception object, and catch
the exception with a try/catch condition handler.

If exceptions are visible to users (because they were signaled by an
exception passed to stop, warning, message, etc) these are part of a packages
public API just like function calls. They should be clearly documented and
generally can be changed only in a backward-compatible manner. User code that
catches exceptions depend on them being thrown with the same class name and
having both the same parent classes and the same extra parameters.
}

