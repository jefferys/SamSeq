% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/IOExceptions.R
\name{IOException}
\alias{DirectoryException}
\alias{DirectoryExistsException}
\alias{FileException}
\alias{FileExistsException}
\alias{FileSystemException}
\alias{IOException}
\alias{LinkException}
\alias{LinkExistsException}
\alias{NoSuchDirectoryException}
\alias{NoSuchFileException}
\alias{NoSuchLinkException}
\alias{NoSuchLinkTargetException}
\alias{PathException}
\title{The IOException heierarchy.}
\usage{
IOException(message = "An IOException occurred.", call = NULL,
  package = packageName(), ...)

FileSystemException(message = "A FileSystemException occurred.",
  call = NULL, package = packageName(), ...)

PathException(path,
  message = sprintf("A PathException occurred involving path: \\"\%s\\". (Running in: \\"\%s\\").",
  path, getwd()), call = NULL, package = packageName(), ...)

FileException(path,
  message = sprintf("A FileException occurred involving file: \\"\%s\\". (Running in: \\"\%s\\").",
  path, getwd()), call = NULL, package = packageName(), ...)

DirectoryException(path,
  message = sprintf("A DirectoryException occurred involving directory: \\"\%s\\". (Running in: \\"\%s\\").",
  path, getwd()), call = NULL, package = packageName(), ...)

LinkException(path, target,
  message = sprintf("A LinkException occurred involving link: \\"\%s\\" with target: \\"\%s\\". (Running in: \\"\%s\\").",
  path, target, getwd()), call = NULL, package = packageName(), ...)

NoSuchLinkTargetException(path, target,
  message = sprintf("The link target does not exist; link: \\"\%s\\" with target: \\"\%s\\". (Running in: \\"\%s\\").",
  path, target, getwd()), call = NULL, package = packageName(), ...)

NoSuchFileException(path,
  message = sprintf("No such file: \\"\%s\\". (Running in: \\"\%s\\").", path,
  getwd()), call = NULL, package = packageName(), ...)

NoSuchDirectoryException(path,
  message = sprintf("No such directory: \\"\%s\\". (Running in: \\"\%s\\").",
  path, getwd()), call = NULL, package = packageName(), ...)

NoSuchLinkException(path, target = NA,
  message = sprintf("No such link: \\"\%s\\". (Running in: \\"\%s\\").", path,
  getwd()), call = NULL, package = packageName(), ...)

FileExistsException(path,
  message = sprintf("File already exists: \\"\%s\\". (Running in: \\"\%s\\").",
  path, getwd()), call = NULL, package = packageName(), ...)

DirectoryExistsException(path,
  message = sprintf("Directory already exists: \\"\%s\\". (Running in: \\"\%s\\").",
  path, getwd()), call = NULL, package = packageName(), ...)

LinkExistsException(path, target,
  message = sprintf("Link already exists: \\"\%s\\" with target: \\"\%s\\". (Running in: \\"\%s\\").",
  path, target, getwd()), call = NULL, package = packageName(), ...)
}
\arguments{
\item{message}{The message associated with the exception, for reading by
humans. The default message is usually good enough, but can be overriden
through this parameter if needed. When constructed inside packages, the
message displayed will have the name of the package prepended as
\code{'[\var{package}] \var{message}'} due to \code{conditionMessage} being
over-ridden for \code{Exception} subclasses.}

\item{call}{The call or call stack associated with the exception. By default
this is NULL as \code{IOException}s are usually environment problems. Can
be overriden to provide the \code{\link{Sys.calls}} call stack or a single
\code{\link{Sys.call}}.}

\item{package}{The package where this exception is generated. May be
\code{NULL} when exceptions are generated and signaled from interactive or
script level code and not from a package. Attempts to guess the package by
default. Will usually include the package in the dispalyed \code{message}.}

\item{...}{Additional arguments defining \code{\var{arg}= \var{value}} data
to include in the Exception (accessible as list elements, but preferably
by S3 accessor functions).}

\item{path}{The path associated with an exception, as a one element character
vector This is required for a \code{PathException} or sub-class, but may be
\code{NULL} or \code{NA}. Accessible via the the \code{exceptionPath} S3
accessor.}

\item{target}{The target associated with a problematic file system link. This
is required for a \code{LinkException} or sub-class, but may be \code{NULL}
or \code{NA}. Accessible via the the \code{exceptionTarget} S3 accessor}
}
\value{
An \code{IOException} or descendant describing some problematic
  event involving a file system, a network socket, etc. Always has or extends
  class \code{c( "IOException", "Exception", "condition" )}.
}
\description{
\code{IOException}s and their sub-classes are \code{Exception}s that describe
problems encoutered reading or writting to a file, network socket, console,
connection, etc. Subclasses extended the specificity of the
\code{IOException} and can include data elements. See
\code{\link{Exception}}. These exceptions are intended to be signaled, i.e.
with \code{stop} and exist both to provide pre-defined error messages and so
that handlers in try/catch blocks have latitude to choose what granularity of
exception to catch.
}
\section{Functions}{
\itemize{
\item \code{IOException}: This exception and sub-classes are \code{Exception}s that describe
problems encoutered reading or writting to a file, network socket, console,
connection, etc.
\itemize{
   \item message: "\code{[\var{package}] An IOException occurred.}
   \item class: \code{c( "IOException", "Exception", "condition" )}
   \item data: None
}

\item \code{FileSystemException}: This exception and sub-classes are \code{Exception}s that describe
problems encoutered reading or writting to a file system, disk, etc.
\itemize{
   \item message: "\code{[\var{package}] A FileSystemException occurred.}"
   \item class: \code{c( "FileSystemException", "IOException", "Exception",
                      "condition" )}
   \item data: None
}

\item \code{PathException}: This exception and sub-classes are \code{FileSystemException}s that describe
problems encoutered in the context of an operation on a file system path.
Always includes a "path" data element, accessible with
\code{exceptionPath}.
\itemize{
   \item message: '\code{[\var{package}] A PathException occurred involving
                        path: "\var{path}". (Running in: "\var{getwd()}").}'
   \item class: \code{c( "PathException", "FileSystemException",
                "IOException", "Exception", "condition" )}
   \item data: \code{path} - see \code{exceptionPath}.
}

\item \code{FileException}: This exception and sub-classes are \code{PathException}s that describe
problems reading, writing, creating, or deleting a file (not a directory).
Always includes a "path" data element, accessible with
\code{exceptionPath}. Issues with the \emph{contents} of a file are
not \code{IOExceptions}, those are likely \code{DataFormatException}s or
\code{DataValueException}s. The path may be a valid link to a file, or a
nested series of links, but this should be transparent. The code generating
the exception should identify \code{LinkExceptions} separately.
\itemize{
   \item message: \code{'[\var{package}] A FileException occurred involving
                        file: "\var{path}". (Running in: "\var{getwd()}").'}
   \item class: \code{c( "FileException", "PathException",
            "FileSystemException", "IOException", "Exception", "condition" )}
   \item data: \code{path} - see \code{exceptionPath}.
}

\item \code{DirectoryException}: This exception and sub-classes are \code{PathException}s that describe
problems reading, writing, creating, or deleting a directory. Always includes
a "path" data element, accessible with \code{exceptionPath}. The
path may be a valid link to a directory, or a nested series of links, but
this should be transparent. The code generating the exception should identify
\code{LinkExceptions} separately.
\itemize{
   \item message: \code{'[\var{package}] A DirectoryException occurred
           involving directory: "\var{path}". (Running in: "\var{getwd()}").'}
   \item class: \code{c( "DirectoryException", "PathException",
           "FileSystemException", "IOException", "Exception", "condition" )}
   \item data: \code{path} - see \code{exceptionPath}.
}

\item \code{LinkException}: This exception and sub-classes are \code{PathException}s that describe
problems creating, deleating, or using a hard or soft/symbolic link to a file
system object. Always includes a "path" data element, accessible with
\code{exceptionPath} and a "target" data element, accessible with
\code{exceptionTarget}. Problems with the target (so long as it
exists) are not a problem with the link but a problem with the target only.
The fact that the path is a link should be ignored in this case and the
exception should be based on the target object (file, directory, or
possibly a link.)
\itemize{
   \item message: \code{'[\var{package}] A LinkException occurred involving
            link: "\var{path}" with target: "\var{target}". (Running in:
            "\var{getwd()}").'}
   \item class: \code{c( "LinkException", "PathException",
           "FileSystemException", "IOException", "Exception", "condition" )}
   \item data: \code{path} - see \code{exceptionPath}.
   \item data: \code{target} - see \code{exceptionTarget}.
}

\item \code{NoSuchLinkTargetException}: If a link's target is invalid
\itemize{
   \item message: \code{'[\var{package}] The link target does not exist;
            link: "\var{path}" with target: "\var{target}". (Running in:
            "\var{getwd()}").'}
   \item class: \code{c( "NoSuchLinkTargetException", "LinkException", "PathException",
           "FileSystemException", "IOException", "Exception", "condition" )}
   \item data: \code{path} - see \code{exceptionPath}.
   \item data: \code{target} - see \code{exceptionTarget}.
}

\item \code{NoSuchFileException}: The specified file was not found on the file system.
\itemize{
   \item message: \code{'[\var{package}] No such file: "\var{path}".
                         (Running in: "\var{getwd()}").'}
   \item class: \code{c( "NoSuchFileException", "FileException",
       "PathException", "FileSystemException", "IOException", "Exception",
       "condition" )}
   \item data: \code{path} - see \code{exceptionPath}.
}

\item \code{NoSuchDirectoryException}: The specified directory was not be found on the file system.
\itemize{
   \item message: \code{'[\var{package}] No such directory: "\var{path}".
                         (Running in: "\var{getwd()}").'}
   \item class: \code{c( "NoSuchDirectoryException", "DirectoryException",
       "PathException", "FileSystemException", "IOException", "Exception",
       "condition" )}
   \item data: \code{path} - see \code{exceptionPath}.
}

\item \code{NoSuchLinkException}: The specified link was not be found on the file system. Should only be used
when the path is expected by the user to be a link. Usually a link is used
transparently to identify a file or directory, in which case a
\code{NoSuchFileException} or \code{NoSuchDirectoryException} should be used.
\itemize{
   \item message: \code{'[\var{package}] No such link: "\var{path}".
                         (Running in: "\var{getwd()}").'}
   \item class: \code{c( "NoSuchLinkException", "LinkException",
       "PathException", "FileSystemException", "IOException", "Exception",
       "condition" )}
   \item data: \code{path} - see \code{exceptionPath}.
   \item data: \code{target} - see \code{exceptionTarget}.
}

\item \code{FileExistsException}: The specified file already exists on the file system.
\itemize{
   \item message: \code{'[\var{package}] File already exists: "\var{path}".
                         (Running in: "\var{getwd()}").'}
   \item class: \code{c( "FileExistsException", "FileException",
       "PathException", "FileSystemException", "IOException", "Exception",
       "condition" )}
   \item data: \code{path} - see \code{exceptionPath}.
}

\item \code{DirectoryExistsException}: The specified directory already existins on the file system.
\itemize{
   \item message: \code{'[\var{package}] Directory already exists: "\var{path}".
                         (Running in: "\var{getwd()}").'}
   \item class: \code{c( "DirectoryExistsException", "DirectoryException",
       "PathException", "FileSystemException", "IOException", "Exception",
       "condition" )}
   \item data: \code{path} - see \code{exceptionPath}.
}

\item \code{LinkExistsException}: The specified link already exists on the file system. Should only be used
when the path is expected by the user to be a link. Usually a link is used
transparently to identify a file or directory, in which case a
\code{FileExistsException} or \code{DirectoryExistsException} should be used.
\itemize{
   \item message: \code{'[\var{package}] Link already exists: "\var{path}".
                         (Running in: "\var{getwd()}").'}
   \item class: \code{c( "LinkExistsException", "LinkException",
       "PathException", "FileSystemException", "IOException", "Exception",
       "condition" )}
   \item data: \code{path} - see \code{exceptionPath}.
   \item data: \code{target} - see \code{exceptionTarget}.
}
}}
\examples{
ioEx <- IOException()
conditionMessage(e)
conditionCall(e)
exceptionPackage(e)

ioEx <- IOException( "Including the call stack", call=Sys.calls() )
ioEx <- IOException( "Lying about the package", package="NotMine" )
ioEx <- IOException( "Extra data included", x=1, y=list(A=1, B="two"), path="../" )
x <- ioEx$x
y <- ioEx$y
path <- exceptionPath(ioEx)
path == ioEx$path

pEx <- pathException( "/some/path" )
thePath <- exceptionPath(pEx)

\dontrun{
  wantToCreate <- "theFile"
  if ( file.exists( wantToCreate )) {
     if (is.dir) { stop( DirectoryExists( wantToCreate )) }
     else { stop( FileExists( wantToCreate )) }
  }
}
}
\seealso{
\code{condition}, \code{conditionMessage()}, \code{conditionCall},
  \code{Exception}, \code{exceptionPackage}
}

