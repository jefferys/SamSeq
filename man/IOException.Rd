% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/exceptions.R
\name{IOException}
\alias{IOException}
\title{Create a base IOException object.}
\usage{
IOException(message = "An IOException occured.", call = sys.calls(),
  package = packageName(), ...)
}
\arguments{
\item{message}{The message associated with the exception. By default this is
'An IOException occured.', but due to \code{conditionMessage} being over-ridden
for \code{Exception} subclasses, \code{package=} is usually prepended, making the
message appear as '[<package>] <message>'.}

\item{call}{The call or call stack associated with the exception.
By default this is the \code{sys.calls()} call stack starting where this object
was constructed.}

\item{package}{The package where this exception is generated. May be
\code{NULL} when exceptions are signaled from interactive or script level
code and not from a package. Attempts to guess the package by default.}

\item{...}{Additional arguments defining key=value data to include in the
Exception S3 object (accessible as list elements). Don't reuse named
arguments, of course.}
}
\value{
An IOException object describing some problematic event involving
  input or output.
}
\description{
An \code{IOException} is a subclass of \code{Exception} that describes a
problem encoutered reading or writting to a file, network socket, console,
connection, etc. Can be extended further to provide more specific
information.
}
\examples{
e <- IOException()
conditionMessage(e)
conditionCall(e)
exceptionPackage(e)

e <- IOException( "Lying about the package", package="NotMine" )

e <- IOException( "Extra data included", x=1, y=2, z=list(A=1, B="two") )
x <- e$x
y <- e$y
z <- e$z

}
\seealso{
\code{condition}, \code{conditionMessage()}, \code{conditionCall},
  \code{Exception}, \code{exceptionPackage}
}

